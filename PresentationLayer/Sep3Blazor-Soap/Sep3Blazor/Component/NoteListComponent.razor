@using Sep3Blazor.Model
@using System.Globalization
@using Sep3Blazor.Authentication
@using Sep3Blazor.Data.NoteData
@using Sep3Blazor.Data.Notifications
@using Sep3Blazor.Data.Notifications.NotificationModel
@inject INoteService _noteService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NotificationManager _notificationManager

<div class="container-fluid">
    <div class="d-flex flex-row align-items-center justify-content-around">
        <div class="col-6">
            <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#exampleAddModal"><i class="oi oi-plus"></i> New note</button>
            <div class="modal fade" id="exampleAddModal" tabindex="-1" aria-labelledby="exampleAddModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content" style="background-color:white">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleAddModalLabel">Add Node in Group @GroupName</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cancel"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@_template" OnValidSubmit="@SubmitAddNote">
                                <DataAnnotationsValidator/>
                                <ValidationSummary/>
                                <p>
                                    <label class="d-flex flex-row">
                                        <text class="col-2"> Week:</text>
                                        <InputNumber class="col-2" @bind-Value="_template.week"/>
                                    </label>
                                </p>
                                <p>
                                    <label class="d-flex flex-row">
                                        <text class="col-2"> Year:</text>
                                        <InputNumber class="col-2" @bind-Value="_template.year"/>
                                    </label>
                                </p>
                                <p>
                                    <label class="d-flex flex-row">
                                        <text class="col-2"> Name:</text>
                                        <InputText class="col-6" @bind-Value="_template.name"/>
                                    </label>
                                </p>
                                <p>
                                    <label class="d-flex flex-row">
                                        <text class="col-2"> Status:</text>
                                        <InputSelect class="col-2" @bind-Value="_template.status">
                                            <option value="Not started">Not started</option>
                                            <option value="Started">Started</option>
                                            <option value="Finished">Finished</option>
                                        </InputSelect>
                                    </label>
                                </p>
                                <p>
                                    <label class="d-flex flex-row">
                                        <text class="col-2 textCenterer"> Text:</text>
                                        <InputTextArea class="col-6" @bind-Value="_template.text"/>
                                    </label>
                                </p>
                                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="d-flex flex-row align-items-center">
                <div class="p-2">
                    Search by week: <input type="number" @bind="@_searchedWeek" min="1" max="52" style="width:3em"/>
                </div>
                <div class="p-2">
                    Search by year: <input type="number" @bind="@_searchedYear" style="width:4em"/>
                </div>
                <div class="p-2">
                    <div class="form-group">
                        <button class="btn btn-primary btn-block" @onclick="Search">Search</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-1">
            <div style="display:flex; flex-direction: row; justify-content: center; align-items: center; width: 100%">
                <button type="button" class="btn btn-primary" style="height: 28em; width: 3em;" @onclick="PreviousPage">&lt;</button>
            </div>
        </div>
        <div class="col-10">
            <div class="row justify-content-between">
                @for (int i = -1; i < 2; i++)
                {
                    <div class="col-sm-4">
                        <div class="p-3 bg-secondary text-white">
                            @switch (i)
                            {
                                case -1:
                                    var subtractedTime = _time.Subtract(TimeSpan.FromDays(7));
                                    <p class="m-sm-0" style="text-align:center;">Week @(GetIsoWeekOfYear(subtractedTime)) / Year @(GetIsoYear(subtractedTime)) </p>
                                    break;
                                case 0:
                                    <p class="m-sm-0" style="text-align:center;">Week @(GetIsoWeekOfYear(_time)) / Year @(GetIsoYear(_time))</p>
                                    break;
                                case 1:
                                    var addedTime = _time.Add(TimeSpan.FromDays(7));
                                    <p class="m-sm-0" style="text-align:center;">Week @(GetIsoWeekOfYear(addedTime)) / Year @(GetIsoYear(addedTime)) </p>
                                    break;
                            }
                        </div>
                        <table class="table table-sm table-hover table-wrapper-scroll-y my-custom-scrollbar">
                            @if (NoteList == null)
                            {
                                <p>
                                    <em>Loading...</em>
                                </p>
                            }
                            else
                            {
                                @foreach (Note note in NoteList)
                                {
                                    @switch (i)
                                    {
                                        case -1:
                                            var subtractedTime = _time.Subtract(TimeSpan.FromDays(7));
                                            if (note.year == GetIsoYear(subtractedTime) && note.week == GetIsoWeekOfYear(subtractedTime))
                                            {
                                                <NoteComponent OnClick="ClickHandler" Note="note" GroupName="@GroupName"></NoteComponent>
                                            }
                                            break;
                                        case 0:
                                            if (note.year == GetIsoYear(_time) && note.week == GetIsoWeekOfYear(_time))
                                            {
                                                <NoteComponent OnClick="ClickHandler" Note="note" GroupName="@GroupName"></NoteComponent>
                                            }
                                            break;
                                        case 1:
                                            var addedTime = _time.Add(TimeSpan.FromDays(7));
                                            if (note.year == GetIsoYear(addedTime) && note.week == GetIsoWeekOfYear(addedTime))
                                            {
                                                <NoteComponent OnClick="ClickHandler" Note="note" GroupName="@GroupName"></NoteComponent>
                                            }
                                            break;
                                    }
                                }
                            }
                        </table>
                    </div>
                }
            </div>
        </div>
        <div class="col-1">
            <div style="display:flex; flex-direction: row; justify-content: center; align-items: center; width: 100%">
                <button type="button" class="btn btn-primary" style="height: 28em; width: 3em;" @onclick="NextPage">&gt;</button>
            </div>
        </div>
    </div>
</div>

@code{
    // Parameter to specify what Group and GroupName object is in focus.
    [Parameter]
    public int GroupId { get; set; }

    [Parameter]
    public string GroupName { get; set; }

    //To make use of cascading values we declare cascading parameter
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }
    
    //Instance variables
    private int _searchedWeek;
    private int _searchedYear;
    
    private IList<Note> NoteList { get; set; }
    private DateTime _time = DateTime.Today;

    // Note object to be used 
    private Note _template = new Note(0, 0, 0, 0, "", "", "");

    private User _loggedInUser;

    // Method to run, when user enters this page.
    protected override async Task OnInitializedAsync()
    {
        _searchedWeek = GetIsoWeekOfYear(_time);
        _searchedYear = GetIsoYear(_time);
    // Get the selected group's notes
        NoteList = await _noteService.GetNoteList(GroupId.ToString());

    // Set the LoggedInUser equal to the User the custom Authentication service gets.
        _loggedInUser = ((CustomAuthenticationStateProvider) _authenticationStateProvider).CachedUser;

    // Instantiate Template note for the EditForm component.
        _template = new Note(0, GroupId, GetIsoWeekOfYear(_time), GetIsoYear(_time), "", "Not started", "");
    }

    //This method notifies the component that its state has changed.
    protected override async void OnParametersSet()
    {
        NoteList = await _noteService.GetNoteList(GroupId.ToString());
        StateHasChanged();
    }

    // Show the notes further ahead in time and prevent going past week 52.
    private void NextPage()
    {
        var dateTime = _time.Add(TimeSpan.FromDays(7 * 3));
        _time = dateTime;
    }

    // Show the notes further behind in time and prevent going before week 1.
    private void PreviousPage()
    {
        var dateTime = _time.Subtract(TimeSpan.FromDays(7 * 3));
        _time = dateTime;
    }

    // Using Calender Library method to get the week of today´.
    private static int GetIsoWeekOfYear(DateTime time)
    {
        DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
        if (day is >= DayOfWeek.Monday and <= DayOfWeek.Wednesday)
        {
            time = time.AddDays(3);
        }
        return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
    }

    //Used to define the year in calander
    private static int GetIsoYear(DateTime time)
    {
        return CultureInfo.InvariantCulture.Calendar.GetYear(time);
    }

    //Method to get the date
    async Task ClickHandler()
    {
        NoteList = await _noteService.GetNoteList(GroupId.ToString());
    }

    //Method adds note
    private async Task SubmitAddNote()
    {
        if (_template.name.Equals("") || _template.name.Equals(null))
        {
            _template.name = "Note";
        }
        Notification notification = await _noteService.AddNote(new Note(0,  GroupId, _template.week, _template.year, _template.name, _template.status, _template.text));
        NoteList = await _noteService.GetNoteList(GroupId.ToString());
        _template = new Note(0, GroupId, GetIsoWeekOfYear(_time), GetIsoYear(_time), "", "Not started", "");
        _notificationManager.Show(notification);
    }

    //Method search by week and year
    private void Search()
    {
        if (_searchedWeek < 0)
        {
            _searchedWeek = 1;
        }
        else if (_searchedWeek > 52)
        {
            _searchedWeek = 52;
        }
        DateTime temp = FirstDateOfWeek(_searchedYear, _searchedWeek);
        _time = temp;
    }

    //Defines first date of the week in a new year
    public static DateTime FirstDateOfWeek(int year, int weekOfYear)
    {
        DateTime jan1 = new DateTime(year, 1, 1);
        int daysOffset = DayOfWeek.Thursday - jan1.DayOfWeek;

    // Use first Thursday in January to get first week of the year as
    // it will never be in Week 52/53
        DateTime firstThursday = jan1.AddDays(daysOffset);
        Calendar cal = CultureInfo.CurrentCulture.Calendar;
        int firstWeek = cal.GetWeekOfYear(firstThursday, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

        int weekNum = weekOfYear;
    // As we're adding days to a date in Week 1,
    // we need to subtract 1 in order to get the right date for week #1
        if (firstWeek == 1)
        {
            weekNum -= 1;
        }

    // Using the first Thursday as starting week ensures that we are starting in the right year
    // then we add number of weeks multiplied with days
        DateTime result = firstThursday.AddDays(weekNum * 7);

    // Subtract 3 days from Thursday to get Monday, which is the first weekday in ISO8601
        return result.AddDays(-3);
    }

}