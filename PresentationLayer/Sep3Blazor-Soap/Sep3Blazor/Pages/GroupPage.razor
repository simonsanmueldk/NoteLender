@page "/GroupPage"
@page "/GroupPage/{Id:int}/{GroupName}" 

@using Microsoft.AspNetCore.Components.Web.Extensions.Head

@using Sep3Blazor.Model
@using Sep3Blazor.Component
@using Sep3Blazor.Data.GroupMembersData
@using Sep3Blazor.Data.NoteData
@using Sep3Blazor.Authentication
@using Sep3Blazor.Data.GroupData
@using Sep3Blazor.Data.Notifications
@using Sep3Blazor.Data.Notifications.NotificationModel
@using Sep3Blazor.Data.Refresh

@inject INoteService _noteService
@inject IGroupMembersService _groupMembersService
@inject IRefreshServiceNavMem _refreshServiceNavMem
@inject NavigationManager _navigationManager;
@inject IGroupService _groupService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NotificationManager _notificationManager


<Title Value="@("Group " + Id)"></Title>
<AuthorizeView Roles="@Id.ToString()">
    <NotAuthorized>
        <p>You don't belong to this group</p>
        <a href="/">Go back</a>
    </NotAuthorized>
    <Authorized>
        <div class="d-flex flex-row align-items-center justify-content-between">
            <div style="margin-top: 0.5rem">
                <h3>GroupPage @GroupName</h3>
            </div>
            <div>
                <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="@("#exampleDelete" + Id)">
                    Delete group
                </button>
                <div class="modal fade" id="@("exampleDelete" + Id)" tabindex="-1" role="dialog" aria-labelledby="@("exampleModalCenterTitle" + Id)" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content" style="background-color: white">
                            <div class="modal-header">
                                <h5 class="modal-title" id="@("#exampleModalLongTitle" + Id)" style="color: black;">Are you sure you want to delete this group?</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cancel"></button>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@(RemoveGroup)">Save changes</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <TabControl Page="@Page">
            <TabPage Text="Notes">
                <NoteListComponent GroupId="@Id" GroupName="@GroupName"></NoteListComponent>
            </TabPage>
            <TabPage Text="Members">
                <div class="row d-flex justify-content-between">
                    <div class="col-sm-6">
                        <MemberListComponent GroupId="@Id" GroupName="@GroupName"></MemberListComponent>
                    </div>
                    <div class="col-sm-6">
                        <InviteComponent GroupId="@Id" GroupName="@GroupName"></InviteComponent>
                    </div>
                </div>
            </TabPage>
        </TabControl>
    </Authorized>
</AuthorizeView >

@code {

    //Instance variables
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string? GroupName { get; set; }
    [Parameter]
    public int Page { get; set; }
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }
    
    public IList<Note> Notes { get; set; }
    public IList<GroupMembers> GroupMembersList { get; set; }

    // Method to run, when user enters this page.
    protected override async Task OnInitializedAsync()
    {
        Notes = await _noteService.GetNoteList(Id.ToString());
        GroupMembersList = await _groupMembersService.GetGroupMemberList(Id);
    }
    
    //This method notifies the component that its state has changed.

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    //Method removes group
    private async void RemoveGroup()
    {
        Notification notification = await _groupService.DeleteGroup(Id.ToString());
        _notificationManager.Show(notification);
        await ((CustomAuthenticationStateProvider) _authenticationStateProvider).ModifyClaims();
        _navigationManager.NavigateTo("/");
        _refreshServiceNavMem.CallRequestRefresh();
    }

}